generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String
  avatar   String?
  isOnline Boolean @default(false)
  lastSeen DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Gönderilen mesajlar
  sentMessages     Message[] @relation("SentMessages")
  // Alınan mesajlar
  receivedMessages Message[] @relation("ReceivedMessages")

  // Gönderilen arkadaşlık istekleri
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  // Alınan arkadaşlık istekleri
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  // Arkadaşlık ilişkileri (gönderilen)
  friendships1 Friendship[] @relation("User1Friendships")
  // Arkadaşlık ilişkileri (alınan)
  friendships2 Friendship[] @relation("User2Friendships")

  @@map("users")
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  // Mesajı gönderen
  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  senderId Int

  // Mesajı alan
  receiver   User @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int

  @@map("messages")
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime @default(now())

  // İsteği gönderen
  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId Int

  // İsteği alan
  receiver   User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  receiverId Int

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // İlk kullanıcı
  user1   User @relation("User1Friendships", fields: [user1Id], references: [id])
  user1Id Int

  // İkinci kullanıcı
  user2   User @relation("User2Friendships", fields: [user2Id], references: [id])
  user2Id Int

  @@unique([user1Id, user2Id])
  @@map("friendships")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}